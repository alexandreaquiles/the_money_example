TDD By Example - The Money Example - Outline

-- Chapter 1
* Made a list of the tests we knew we needed to have working
* Told a story with a snippet of code about how we wanted to view one operation
* Ignored the details of JUnit for the moment
* Made the test compile with stubs
* Made the test run by commiting horrible sins
* Gradually generalized the working code, replacing constants with variables
* Added items to our to-do list rather than addressing them all at once

-- Chapter 2
* Translated a design objection (side effects) into a test case that failed because of the objection
* Got the code to compile quickly with a stub implementation
* Made the test work by typing in what seemed to be the right code

-- Chapter 3
* Noticed that our design pattern (Value Object) implied an operation
* Tested  for that operation
* Implemented it simply
* Didn't refactor immediatly, but instead tested further
* Refactored to capture the two cases at once

-- Chapter 4
* Used functionality just developed to improve a test
* Noticed that if two tests fail at once we're sunk
* Proceeded in spite of the risk
* Used new functionality in the object under test to reduce coupling between the tests and the code

--Chapter 5
* Couldn't tackle a big test, so we invented a small test that represented progress
* Wrote the test by shamelessly duplicating and editing
* Even worse, made the test work by copying and editing model code wholesale
* Promised ourselves we wouldn't go home until duplication was gone

--Chapter 6
* Setpwise moved common code from one class (Dollar) to a superclass (Money)
* Made a second class (Franc) a subclass also
Reconciled two implementations equals() before eliminating the redundant one
